@page "/quiz"
@attribute [Authorize]
@inject IGenericService<QuestionViewModel>? GenericService
@inject IGenericService<ScoreBoardViewModel>? GenericScoreService
@inject BaseSettingsApp? BaseSettingsApp
@inject ILocalStorageService? LocalStorageService
@inject NavigationManager? Navigation
@inject AuthenticationStateProvider? AuthenticationStateProvider
@inject ICryptoService? CryptoService

<PageTitle>Trivia Quiz</PageTitle>

<div class="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 py-10 px-4">
    <div class="max-w-xl mx-auto bg-white rounded-2xl shadow-xl p-8 text-center relative">

        <h1 class="text-3xl font-bold text-indigo-700 mb-6">Trivia Quiz</h1>

        <!-- 🔵 Progress Bar -->
        <div class="w-full bg-gray-200 rounded-full h-3 mb-6 overflow-hidden">
            <div class="bg-indigo-500 h-3 rounded-full transition-all duration-300 ease-out"
                 style="width:@(CountQuestion > 0 ? $"{(currentQuestionIndex + 1) * 100 / CountQuestion}%" : 0)">
            </div>
        </div>

        @if (currentQuestion != null && !gameOver)
        {
            <div class="question-box space-y-6">
                <h3 class="text-xl font-semibold text-gray-800 fade-in">@currentQuestion.Text</h3>

                <!-- ⏱️ Timer -->
                <p class="text-sm text-gray-500">
                    ⏳ Time Left: <strong class="text-indigo-700">@remainingTime</strong> seconds
                </p>

                <div class="grid grid-cols-1 gap-4">
                    @foreach (var choice in currentQuestion.Choices)
                    {
                        <button class="w-full px-4 py-2 bg-indigo-500 text-white font-medium rounded-xl
                                                        hover:bg-indigo-600 transition-all disabled:opacity-50"
                                disabled="@answerGiven"
                                @onclick="(() => CheckAnswer(currentQuestion.Choices.IndexOf(choice)))">
                            @choice
                        </button>
                    }
                </div>

                @if (answerGiven)
                {
                    <div class="mt-4">
                        @if (isCorrect)
                        {
                            <p class="text-green-600 font-semibold text-lg animate-scale">✅ Correct! 🎉</p>
                        }
                        else
                        {
                            <p class="text-red-600 font-semibold text-lg animate-scale">❌ Incorrect 😢</p>
                            <p class="text-sm text-gray-700 mt-2">@((MarkupString)CorrectAnswer)</p>
                        }

                        <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700"
                                @onclick="NextQuestion">
                            Next
                        </button>
                    </div>
                }
            </div>
        }

        <!-- 🎉 Modal Popup -->
        @if (gameOver)
        {
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 fade-in">
                <div class="bg-white rounded-2xl p-6 w-full max-w-md shadow-2xl text-center">
                    <h2 class="text-2xl font-bold text-indigo-700">🎉 Quiz Complete!</h2>
                    <p class="mt-4 text-gray-700 text-lg">Your Score:</p>
                    <p class="text-3xl font-bold text-green-600 mt-1">@score / @Questions?.Count</p>
                    <p class="mt-4 text-gray-700 text-lg">Your High Score is :</p>
                    <p class="text-3xl font-bold text-green-600 mt-1">@HighScore</p>

                    <button class="mt-6 w-full bg-indigo-600 text-white px-4 py-2 rounded-xl hover:bg-indigo-700"
                            @onclick="Restart">
                        Play Again
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .fade-in {
        animation: fadeIn 0.5s ease-in-out forwards;
    }

    .animate-scale {
        animation: scalePop 0.4s ease-in-out forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes scalePop {
        0% {
            transform: scale(0.95);
            opacity: 0;
        }

        100% {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>



@code {
    IList<QuestionViewModel>? Questions;
    IList<QuestionViewModel>? ShuffledQuestions = [];

    int score = 0;
    int currentQuestionIndex = 0;
    QuestionViewModel? currentQuestion;
    bool isCorrect = false;
    bool answerGiven = false;
    bool gameOver = false;
    string CorrectAnswer = string.Empty;
    TokenResponse? Token;
    string? Uri = string.Empty;
    UserViewModel? UserLogged;
    int CountQuestion = 0;

    int remainingTime = 10;
    CancellationTokenSource? cts;
    int HighScore = 0;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await Helper.GetAuthentificationStatus(AuthenticationStateProvider);
        if (!isAuthenticated) Navigation!.NavigateTo("/login", true);
        Uri = BaseSettingsApp?.BaseUrlApiWebHttp + "Question";
        Token = await LocalStorageService!.GetItemDecryptedAsync<TokenResponse>("token", BaseSettingsApp?.OpenerString, BaseSettingsApp?.BaseUrlApiWebHttp + "crypto/decrypt"/*, token.Token*/, CryptoService);
        HighScore = await LocalStorageService!.GetItemDecryptedAsync<int>("highScore");
        UserLogged = Helper.DecryptAndDeserializeUserViewModel(Token?.Token);
        if(Token is not null) 
        {
            Questions = await GenericService!.GetEntitiesAsync(Uri!, Token?.Token);
            CountQuestion = Questions!.Count;
        }
        ShuffleQuestions();
        await LoadQuestion();
    }

    async Task LoadQuestion()
    {
        currentQuestion = Questions is not null ? ShuffledQuestions?[currentQuestionIndex] : null;
        answerGiven = false;
        isCorrect = false;
        remainingTime = 10;
        cts = new CancellationTokenSource();
        await StartTimer(cts.Token);
    }

    void ShuffleQuestions()
    {
        var rng = new Random();
        ShuffledQuestions = Questions?.OrderBy(_ => rng.Next(0, Questions!.Count)).ToList();
        currentQuestionIndex = 0;
    }

    async Task StartTimer(CancellationToken token)
    {
        while (remainingTime > 0 && !token.IsCancellationRequested && !answerGiven)
        {
            await Task.Delay(1000);
            remainingTime--;
            await InvokeAsync(StateHasChanged);
        }

        if (!answerGiven && !token.IsCancellationRequested)
        {
            CheckAnswer(-1);
        }
    }

    void CheckAnswer(int index)
    {
        if (answerGiven) return;
        cts?.Cancel();
        answerGiven = true;
        isCorrect = index == currentQuestion?.CorrectChoiceIndex;
        if (!isCorrect)
        {
            CorrectAnswer = $"The correct answer was: <strong>{currentQuestion?.Choices[currentQuestion.CorrectChoiceIndex]}</strong>";
        }
        else
        {
            score++;
        }
    }

    async Task NextQuestion()
    {
        currentQuestionIndex++;

        if (Questions is not null && currentQuestionIndex < Questions.Count)
        {
            await LoadQuestion();
        }
        else
        {
            if (currentQuestionIndex >= ShuffledQuestions?.Count)
            {
                if (Token is not null && UserLogged is not null)
                {
                    await GenericScoreService!.CreateAsync(BaseSettingsApp?.BaseUrlApiWebHttp + "ScoreBoard"!, Token?.Token, new ScoreBoardViewModel
                    {
                        UserId = UserLogged.Id,
                        Score = score
                    });
                    if (score > HighScore)
                    {
                        await LocalStorageService!.SetItemEncryptedAsync("highScore", score);
                    }
                }
                gameOver = true;
            }
        }
    }

    async Task Restart()
    {
        currentQuestionIndex = 0;
        score = 0;
        gameOver = false;
        answerGiven = false;
        currentQuestion = Questions is not null ? Questions[currentQuestionIndex] : null;
        CorrectAnswer = string.Empty;
        ShuffleQuestions();
        await LoadQuestion();
        await InvokeAsync(StateHasChanged);
    }
}
