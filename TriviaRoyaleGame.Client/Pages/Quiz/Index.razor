@page "/quiz"
@attribute [Authorize]

<PageTitle>Trivia Quiz</PageTitle>

<div class="min-h-screen bg-gradient-to-b from-blue-50 to-blue-100 py-10 px-4">
    <div class="max-w-xl mx-auto bg-white rounded-2xl shadow-xl p-8 text-center">

        <h1 class="text-3xl font-bold text-indigo-700 mb-6">Trivia Quiz</h1>

        @if (gameOver)
        {
            <div class="space-y-4">
                <h3 class="text-2xl font-semibold text-green-700">🎉 Game Over!</h3>
                <p class="text-lg text-gray-700">
                    Your Score: <strong class="text-indigo-700">@score</strong> / @Questions.Count
                </p>
                <button @onclick="Restart"
                        class="px-5 py-2 bg-indigo-600 text-white rounded-xl hover:bg-indigo-700 transition">
                    Play Again
                </button>
            </div>
        }
        else if (currentQuestion != null && currentQuestion.Choices != null)
        {
            <div class="question-box space-y-6">
                <h3 class="text-xl font-semibold text-gray-800">@currentQuestion.Text</h3>

                <p class="text-sm text-gray-500">
                    ⏳ Time Left: <strong class="text-indigo-700">@remainingTime</strong> seconds
                </p>

                <div class="grid grid-cols-1 gap-4">
                    @foreach (var choice in currentQuestion.Choices)
                    {
                        <button class="w-full px-4 py-2 bg-indigo-500 text-white font-medium rounded-xl
                                                hover:bg-indigo-600 transition-all disabled:opacity-50"
                                disabled="@answerGiven"
                                @onclick="(() => CheckAnswer(currentQuestion.Choices.IndexOf(choice)))">
                            @choice
                        </button>
                    }
                </div>

                @if (answerGiven)
                {
                    <div class="mt-4">
                        @if (isCorrect)
                        {
                            <p class="text-green-600 font-semibold text-lg">✅ Correct! 🎉</p>
                        }
                        else
                        {
                            <p class="text-red-600 font-semibold text-lg">❌ Incorrect 😢</p>
                            <p class="text-sm text-gray-700 mt-2">@((MarkupString)CorrectAnswer)</p>
                        }

                        <button class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700"
                                @onclick="NextQuestion">
                            Next
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-gray-600 text-lg">Loading question...</p>
        }
    </div>
</div>


@code {
    List<QuestionViewModel> Questions = [
        new() {
            Text = "Capital of France ?",
            Choices = [ "London", "Paris", "Berlin", "Rome" ],
            CorrectChoiceIndex = 1
        },
        new() {
            Text = "2 + 2 = ?",
            Choices = [ "3", "4", "5", "6" ],
            CorrectChoiceIndex = 1
        },
        new() {
            Text = "Blazor is a ___ framework?",
            Choices = [ "Python", "C#", "Java", "PHP" ],
            CorrectChoiceIndex = 1
        }
    ];

    int score = 0;
    int currentQuestionIndex = 0;
    QuestionViewModel? currentQuestion;
    bool isCorrect = false;
    bool answerGiven = false;
    bool gameOver = false;
    string CorrectAnswer = string.Empty;

    int remainingTime = 10;
    CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        await LoadQuestion();
    }

    async Task LoadQuestion()
    {
        currentQuestion = Questions[currentQuestionIndex];
        answerGiven = false;
        isCorrect = false;
        remainingTime = 10;
        cts = new CancellationTokenSource();
        await StartTimer(cts.Token);
    }

    async Task StartTimer(CancellationToken token)
    {
        while (remainingTime > 0 && !token.IsCancellationRequested && !answerGiven)
        {
            await Task.Delay(1000);
            remainingTime--;
            await InvokeAsync(StateHasChanged);
        }

        if (!answerGiven && !token.IsCancellationRequested)
        {
            CheckAnswer(-1);
        }
    }

    void CheckAnswer(int index)
    {
        if (answerGiven) return;
        cts?.Cancel();
        answerGiven = true;
        isCorrect = index == currentQuestion?.CorrectChoiceIndex;
        if (!isCorrect)
        {
            CorrectAnswer = $"The correct answer was: <strong>{currentQuestion?.Choices[currentQuestion.CorrectChoiceIndex]}</strong>";
        }
        else
        {
            score++;
        }
    }

    async Task NextQuestion()
    {
        currentQuestionIndex++;

        if (currentQuestionIndex < Questions.Count)
        {
            await LoadQuestion();
        }
        else
        {
            gameOver = true;
        }
    }

    async Task Restart()
    {
        currentQuestionIndex = 0;
        score = 0;
        gameOver = false;
        answerGiven = false;
        currentQuestion = Questions[currentQuestionIndex];
        CorrectAnswer = string.Empty;
        await LoadQuestion();
        await InvokeAsync(StateHasChanged);
    }
}
