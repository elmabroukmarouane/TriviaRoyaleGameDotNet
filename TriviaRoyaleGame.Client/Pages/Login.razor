@page "/login"
@layout LoginLayout
@inject IGenericService<QuestionViewModel>? GenericService
@inject BaseSettingsApp? BaseSettingsApp
@inject ILocalStorageService? LocalStorageService
@inject NavigationManager? Navigation
@inject AuthenticationStateProvider? AuthenticationStateProvider
@inject ICryptoService? CryptoService
@inject IAuthenticationService? AuthenticationService
@inject HttpClient? HttpClient
@inject ISourceAppProvider? SourceAppProvider

<PageTitle>Login - Trivia Quiz</PageTitle>

<RadzenAlert Variant="Radzen.Variant.Filled" AlertStyle="@AlertStyle" Size="Radzen.AlertSize.Medium" Shade="Radzen.Shade.Light" AllowClose="false">
    @MessageAlert
</RadzenAlert>

<RadzenTemplateForm TItem="UserViewModel" Data="@UserViewModel" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
    <div class="mb-4">
        <RadzenText class="block text-sm font-medium text-gray-700 mb-1" TextStyle="TextStyle.Subtitle2" TagName="TagName.Auto">Email</RadzenText>
        <RadzenTextBox Name="Email" @bind-Value="UserViewModel.Email" type="email" class="w-full border rounded-lg px-3 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500" Placeholder="Entrer l'email" autofocus />
        <RadzenRequiredValidator Component="Email" Text="Champs obligatoire" Popup="false" />
        <RadzenEmailValidator Component="Email" Text="Renseigner un email valide" Popup="false" />
    </div>

    <div class="mb-4">
        <RadzenText class="block text-sm font-medium text-gray-700 mb-1" TextStyle="TextStyle.Subtitle2" TagName="TagName.Auto">Mot de passe</RadzenText>
        <div class="relative">
            <RadzenTextBox Name="Password" @bind-Value="UserViewModel.Password" type="@(ShowHidePassword ? "text" : "password")"
                           class="w-full border rounded-lg px-3 py-2 pr-10 shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                           Placeholder="Entrer le mot de passe" aria-describedby="password" />
            <span class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 cursor-pointer" @onclick="ShowHidePasswordMethode">
                <i class="bx bx-@(ShowHidePassword ? "show" : "hide")"></i>
            </span>
        </div>
        <RadzenRequiredValidator Component="Password" Text="Champs obligatoire" Popup="false" />
        <RadzenLengthValidator Component="Password" Min="6" Text="Le mot de passe doit avoir minimun 6 caractères" Popup="false" />
        <RadzenLengthValidator Component="Password" Max="25" Text="Le mot de passe doit avoir maximun 25 caractères" Popup="false" />
    </div>

    <div class="mb-4 flex items-center space-x-2">
        <RadzenSwitch id="remember-me" class="form-check-input border-none" />
        <RadzenText TagName="TagName.Auto" class="text-gray-700" for="remember-me">Se souvenir de moi</RadzenText>
    </div>

    <div>
        <RadzenButton ButtonType="Radzen.ButtonType.Submit"
                      IsBusy="IsBusy"
                      Icon="login"
                      Text="Login"
                      class="w-full"
                      Style="background-color: #10B981; color: white;" />
    </div>
</RadzenTemplateForm>


@code {

    private bool ShowHidePassword { get; set; } = false;
    private UserViewModel UserViewModel { get; set; } = new()
    {
        Email = string.Empty
    };
    private string MessageAlert { get; set; } = "Veuillez entrer votre email et mot de passe";
    private Radzen.AlertStyle AlertStyle { get; set; } = Radzen.AlertStyle.Info;
    private bool IsBusy { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await Helper.GetAuthentificationStatus(AuthenticationStateProvider);
        if (isAuthenticated) Navigation!.NavigateTo("/", true);
        return;
    }

    public void ShowHidePasswordMethode()
    {
        ShowHidePassword = !ShowHidePassword;
    }

    private async Task OnSubmit()
    {
        try
        {
            IsBusy = true;
            var token = await AuthenticationService!.Authenticate(UserViewModel, BaseSettingsApp?.BaseUrlApiWebHttp + "user/login");
            if (token is null)
            {
                IsBusy = false;
                MessageAlert = "Email ou mot de passe erroné !";
                AlertStyle = Radzen.AlertStyle.Danger;
                await InvokeAsync(StateHasChanged);
                return;
            }
            var userLogged = Helper.DecryptAndDeserializeUserViewModel(token.Token);
            if (userLogged is null)
            {
                IsBusy = false;
                MessageAlert = "Email ou mot de passe erroné !";
                AlertStyle = Radzen.AlertStyle.Danger;
                await InvokeAsync(StateHasChanged);
                return;
            }
            else
            {
                var tokenString = JsonSerializer.Serialize(token);
                await LocalStorageService!.SetItemEncryptedAsync("token", tokenString, BaseSettingsApp?.OpenerString, BaseSettingsApp?.BaseUrlApiWebHttp + "crypto/encrypt"/*, token.Token*/, CryptoService);
                var backOfficeAuthenticationStateProvider = (ClientAppAuthenticationStateProvider)AuthenticationStateProvider!;
                await backOfficeAuthenticationStateProvider.UpdateAuthenticationState(userLogged);
                IsBusy = false;
                Navigation!.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            var log = LoggingMessaging.LoggingMessageError(
                nameSpaceName: "TriviaRoyaleGame.Client.Pages",
                statusCodeInt: (int)HttpStatusCode.InternalServerError,
                statusCode: HttpStatusCode.InternalServerError.ToString(),
                actionName: "Login - OnSubmit()",
                exception: ex
            );
            await HttpClient!.PostAsJsonAsync(BaseSettingsApp?.BaseUrlApiWebHttp + "Log", new ClientAppLogViewModel()
            {
                Level = "Error",
                Message = log,
                Source = SourceAppProvider?.GetSourceApp(),
            });
            throw new Exception(ex.Message, ex);
        }
    }

    private async Task OnInvalidSubmit()
    {
        await Task.Run(() => { });
    }
}